"use client";
import {
  ChainMismatchError,
  ChainNotConfiguredError,
  ConfigChainsNotFound,
  Connector,
  ConnectorAlreadyConnectedError,
  ConnectorNotFoundError,
  Context,
  SwitchChainNotSupportedError,
  WagmiConfig,
  configureChains,
  createConfig,
  createStorage,
  deepEqual,
  deserialize,
  erc20ABI,
  erc4626ABI,
  erc721ABI,
  paginatedIndexesConfig,
  readContracts,
  serialize,
  useAccount,
  useBalance,
  useBlockNumber,
  useChainId,
  useConfig,
  useConnect,
  useContractEvent,
  useContractInfiniteReads,
  useContractRead,
  useContractReads,
  useContractWrite,
  useDisconnect,
  useEnsAddress,
  useEnsAvatar,
  useEnsName,
  useEnsResolver,
  useFeeData,
  useInfiniteQuery,
  useMutation,
  useNetwork,
  usePrepareContractWrite,
  usePrepareSendTransaction,
  usePublicClient,
  useQuery,
  useQueryClient2,
  useSendTransaction,
  useSignMessage,
  useSignTypedData,
  useSwitchNetwork,
  useToken,
  useTransaction,
  useWaitForTransaction,
  useWalletClient,
  useWatchPendingTransactions,
  useWebSocketPublicClient
} from "./chunk-OSLXAFOC.js";
import {
  mainnet,
  sepolia
} from "./chunk-VFJZXWMM.js";
import "./chunk-6HYQNNXI.js";
import "./chunk-L3LPOETZ.js";
import "./chunk-IFNCQQQP.js";
import "./chunk-V7TQBZW5.js";
import "./chunk-5YZGMAEB.js";
import "./chunk-2B3V2GUC.js";
import "./chunk-J2HAQBMU.js";
import "./chunk-THGD6AAB.js";
import "./chunk-W4575UAP.js";
import "./chunk-EUIKE2YQ.js";
export {
  ChainMismatchError,
  ChainNotConfiguredError,
  ConfigChainsNotFound,
  Connector,
  ConnectorAlreadyConnectedError,
  ConnectorNotFoundError,
  Context,
  SwitchChainNotSupportedError,
  WagmiConfig,
  configureChains,
  createConfig,
  createStorage,
  deepEqual,
  deserialize,
  erc20ABI,
  erc4626ABI,
  erc721ABI,
  mainnet,
  paginatedIndexesConfig,
  readContracts,
  sepolia,
  serialize,
  useAccount,
  useBalance,
  useBlockNumber,
  useChainId,
  useConfig,
  useConnect,
  useContractEvent,
  useContractInfiniteReads,
  useContractRead,
  useContractReads,
  useContractWrite,
  useDisconnect,
  useEnsAddress,
  useEnsAvatar,
  useEnsName,
  useEnsResolver,
  useFeeData,
  useInfiniteQuery,
  useMutation,
  useNetwork,
  usePrepareContractWrite,
  usePrepareSendTransaction,
  usePublicClient,
  useQuery,
  useQueryClient2 as useQueryClient,
  useSendTransaction,
  useSignMessage,
  useSignTypedData,
  useSwitchNetwork,
  useToken,
  useTransaction,
  useWaitForTransaction,
  useWalletClient,
  useWatchPendingTransactions,
  useWebSocketPublicClient
};
//# sourceMappingURL=wagmi.js.map
