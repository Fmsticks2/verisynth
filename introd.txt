Perfect — here’s a **complete, detailed prompt** you can give to **Claude (or any coding AI)** to generate the full **VeriSynth** project with the exact tech stack you described:

---

## 🧠 Prompt for Claude (copy everything below)

**You are an expert full-stack Web3 developer. Build a complete project called “VeriSynth” based on the following full specification.**

---

### 🏗️ Project Overview

**Project Name:** VeriSynth
**Goal:** A verifiable synthetic data generator built on the 0G stack that allows users to:

1. Generate synthetic datasets via a frontend UI.
2. Upload datasets to decentralized storage (mocked or IPFS for MVP).
3. Register dataset metadata on-chain (model version, dataset hash, CID, timestamp).
4. Verify datasets by recomputing and matching stored hashes.

---

### 🧩 Tech Stack

**Frontend:**

* React + Vite
* TypeScript (preferred)
* Tailwind CSS for layout
* Framer Motion for animations
* Poppins font via Google Fonts
* Iconify for professional icons
* RainbowKit + Wagmi + ethers.js for wallet connection
* Professional UI with consistent color palette (use modern hues like blue `#2563EB`, purple `#7C3AED`, light gray backgrounds `#F9FAFB`, white cards `#FFFFFF`)

**Smart Contract:**

* Solidity (v0.8.x)
* Hardhat for deployment/testing
* Contract: `DatasetRegistry.sol`

**Smart Contract Functionalities:**

```solidity
struct Dataset {
    uint256 id;
    string modelVersion;
    string seed;
    string dataHash;
    string cid; // IPFS or 0G Storage reference
    address owner;
    uint256 timestamp;
}
```

Functions:

1. `registerDataset(string modelVersion, string seed, string dataHash, string cid)`
   → emits `DatasetRegistered` event.
2. `getDataset(uint256 id)` → returns dataset details.
3. `verifyDataset(uint256 id, string computedHash)` → compares stored `dataHash` with the provided one.
4. Public getter to list all datasets by owner.

Use events:

```solidity
event DatasetRegistered(uint256 indexed id, address indexed owner, string cid);
event DatasetVerified(uint256 indexed id, bool verified);
```

---

### ⚙️ Frontend Requirements

#### **Layout**

* Navbar with brand “VeriSynth” and wallet connect button (RainbowKit).
* Main hero section with animated heading “Generate Verifiable Synthetic Data.”
* Two main tabs:

  1. **Generate Dataset**

     * Input fields: `Model Version`, `Seed`, `Data Topic` (textarea)
     * “Generate Data” button (simulates dataset JSON output)
     * Display generated dataset preview + computed `keccak256` hash.
     * Upload to decentralized storage (mocked via IPFS API).
     * Call `registerDataset()` on the contract.
     * Show success animation + transaction hash.
  2. **Verify Dataset**

     * Input: Dataset ID + uploaded file (recompute hash)
     * Display on-chain hash vs computed hash
     * Show “✅ Verified” or “❌ Mismatch” animation.

#### **UI Components**

* `Header.tsx`: logo, wallet connect, theme toggle.
* `DatasetCard.tsx`: styled card showing dataset metadata and CID link.
* `GeneratePanel.tsx`: handles input, generation, registration.
* `VerifyPanel.tsx`: handles verification UI.
* `Modal.tsx`: for feedback and transaction status.

#### **Styling**

* Font: `"Poppins", sans-serif`
* Use consistent padding, rounded corners (`rounded-2xl`), soft shadows (`shadow-lg`)
* Gradient primary buttons (blue → purple)
* Subtle motion on hover using Framer Motion

---

### 💾 Integration

#### **Wallet Integration**

Use RainbowKit + Wagmi setup:

```bash
npm install @rainbow-me/rainbowkit wagmi ethers
```

Connect to testnet (e.g., Base Sepolia or Polygon Mumbai).
Use standard Wagmi config with chains setup.
All contract write calls should use `useContractWrite`, `usePrepareContractWrite`, and `useWaitForTransaction`.

---

### 🔐 Data Hashing

Use `ethers.utils.keccak256()` to compute dataset hash from JSON stringified data.

---

### 🧠 Optional Bonus (if time allows)

* Add IPFS upload (via Web3.Storage or Pinata).
* Show verification proofs (hash comparison).
* Allow dataset NFT minting (ERC-721 optional).

---

### 🎨 Animation + Visuals

Use Framer Motion for:

* Smooth fade-in on page load
* Button hover scale-up
* Success modal spring animation

Icons:

* Iconify icons (use `ic:baseline-verified`, `mdi:database`, `material-symbols:cloud-upload`, `ph:check-circle-bold`)

---

### 🧰 Deliverables

Claude should generate:

1. `/contracts/DatasetRegistry.sol`
2. `/scripts/deploy.js`
3. `/frontend/src` with components, pages, and hooks.
4. Working `connect wallet → generate → register → verify` flow.
5. Clean UI with motion and Poppins font.
6. Instructions in README for local run (`npm run dev`, `npx hardhat node`, etc.)

---

### 🧾 Color Scheme (Professional UI)

| Element          | Color                         |
| ---------------- | ----------------------------- |
| Primary Gradient | `from-blue-600 to-purple-600` |
| Background       | `#F9FAFB`                     |
| Cards            | `#FFFFFF`                     |
| Text             | `#111827`                     |
| Secondary Text   | `#6B7280`                     |
| Accent           | `#7C3AED`                     |

---

### 🎬 Example Demo Flow

1. User connects wallet via RainbowKit.
2. Fills dataset generation form → presses “Generate.”
3. Synthetic dataset JSON preview appears → hash computed.
4. User clicks “Register on-chain.”
5. Transaction sent → success modal shown.
6. In Verify tab → user inputs ID + reuploads data file.
7. Verification shows “✅ Verified” or “❌ Mismatch.”

---

### ✅ Summary

Build VeriSynth as:

* A polished React + Vite + Framer Motion + Tailwind frontend.
* Solidity + Hardhat smart contract with dataset registry + verification.
* RainbowKit wallet integration.
* End-to-end working demo showing data generation, registration, and verification.

---

**Output:**
Provide the full folder structure, all necessary files, Solidity + frontend code, and integration points — all production-level, clean, and deployable.
